/* 
This is what you can put in you're "database.sql" query to initialize the model we imagine.
Version control:
25/11 -Creation of different table with what we understand from the subject V
      -Insert data into this tables and test the JOIN feature (for the list types) V
      -Foreign key test (to improve) X
26/11 -Foreign key V
*/

-- Active: 1673970259568@@127.0.0.1@3306@intelliq_db
/* 
This is what you can put in you're "database.sql" query to initialize the model we imagine.
Version control:
25/11 -Creation of different table with what we understand from the subject V
      -Insert data into this tables and test the JOIN feature (for the list types) V
      -Foreign key test (to improve) X
26/11 -Foreign key V
*/

USE intelliq_db;

/*------------------------------------------------------------------------
Create Tables
------------------------------------------------------------------------*/
#users
CREATE TABLE users (
    userID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    username CHAR(50) UNIQUE KEY
);

#questionnaires
CREATE TABLE questionnaires (
    questionnaireID CHAR(10) PRIMARY KEY,
    questionnaireTitle CHAR(255) NOT NULL
);

#keywords
CREATE TABLE keywords (
    keyword CHAR(255) PRIMARY KEY
);

#questions
CREATE TABLE questions (
    qID CHAR(10) PRIMARY KEY,
    qtext CHAR(255) NOT NULL,
    required ENUM('true','false') NOT NULL,
    type ENUM('question','profile') NOT NULL
);

#options
CREATE TABLE options (
    optID CHAR(10) PRIMARY KEY,
    opttxt CHAR(100) NOT NULL,
    nextqID CHAR(10) NOT NULL
);

#junction table between questionnaires and keywords
CREATE TABLE questionnaires_keywords (
    questionnaireID CHAR(10) NOT NULL,
    keyword CHAR(255) NOT NULL,
    PRIMARY KEY (questionnaireID,keyword),
    FOREIGN KEY (questionnaireID) REFERENCES questionnaires(questionnaireID),
    FOREIGN KEY (keyword) REFERENCES keywords(keyword)
);

#junction table between questionaires and questions
CREATE TABLE questionnaires_questions (
    questionnaireID CHAR(10) NOT NULL,
    qID CHAR(10) NOT NULL,
    PRIMARY KEY (questionnaireID, qID),
    FOREIGN KEY (questionnaireID) REFERENCES questionnaires(questionnaireID),
    FOREIGN KEY (qID) REFERENCES questions(qID)
);

#junction table between questions and options
CREATE TABLE questions_options (
    qID CHAR(10) NOT NULL,
    optID CHAR(10) NOT NULL,
    PRIMARY KEY (qID, optID),
    FOREIGN KEY (qID) REFERENCES questions(qID),
    FOREIGN KEY (optID) REFERENCES options(optID)
);

#answers
CREATE TABLE answers (
    questionnaireID CHAR(10) NOT NULL,
    session CHAR(4) NOT NULL,
    qID CHAR(10) NOT NULL,
    ans CHAR(10) NOT NULL,
    PRIMARY KEY (questionnaireID,session,qID,ans),
    FOREIGN KEY (questionnaireID) REFERENCES questionnaires(questionnaireID),
    FOREIGN KEY (qID) REFERENCES questions(qID),
    FOREIGN KEY (ans) REFERENCES options(optID)
);

/*------------------------------------------------------------------------
TEST ZONE (query)
------------------------------------------------------------------------*/
SELECT * FROM questionnaires WHERE questionnaireID = 'QQ000';
SELECT * FROM keywords WHERE keyword = 'first' OR keyword = 'questionnaire';

SELECT * FROM questionnaires_keywords;

SELECT DISTINCT questionnaires.questionnaireID, keywords.keyword
FROM questionnaires_keywords
JOIN questionnaires on questionnaires_keywords.`questionnaireID` = questionnaires.questionnaireID
JOIN keywords on questionnaires_keywords.keyword = keywords.keyword;

/* This functions needs to be run before testing answers endpoints.*/
INSERT INTO answers (questionnaireID,session,qID,ans)
VALUE ('QQ000','ABCD','P00','P00TXT');

INSERT INTO answers (questionnaireID,session,qID,ans)
VALUE ('QQ000','ABCD','P01','P01A1');

SELECT * FROM answers
WHERE answers.questionnaireID='QQ000' AND answers.session='ABCD';

